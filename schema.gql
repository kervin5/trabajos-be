# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type TagCount {
  jobs: Int!
}

type UserCount {
  jobs: Int!
  companies: Int!
  tags: Int!
}

"""a single tag"""
type Tag {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  userId: String
  _count: TagCount!
  jobs: [Job!]
  User: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LocationCount {
  jobs: Int!
}

"""a single location"""
type Location {
  id: ID!
  name: String!
  latitude: Float!
  longitude: Float!
  _count: LocationCount!
  jobs: [Job!]
}

type CompanyCount {
  employees: Int!
  jobs: Int!
}

"""a single tag"""
type Company {
  id: ID!
  name: String!
  verified: Boolean!
  _count: CompanyCount!
  jobs: [Job!]
}

type JobCount {
  images: Int!
  tags: Int!
}

"""a single image"""
type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  path: String!
  bucket: String!
  jobId: String
  signedUrl: String
}

"""a single job"""
type Job {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  expiresAt: DateTime
  title: String!
  content: String!
  status: JobStatus!
  views: Int!
  locationId: String
  source: JobSource!
  companyId: String
  externalUrl: String
  tags: [Tag!]
  _count: JobCount!
  plainTextContent: String
  author: User
  location: Location
  company: Company
  images: [Image!]
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  DELETED
  EXPIRED
}

enum JobSource {
  INTERNAL
  EXTERNAL
}

"""a single user"""
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String
  lastName: String
  role: SystemRole!
  phone: String
  emailVerified: Boolean!
  phoneVerified: Boolean!
  _count: UserCount!
  jobs: [Job!]
  tags: [Tag!]
  displayName: String
}

enum SystemRole {
  ADMIN
  CANDIDATE
  EMPLOYER
}

type LoginResponse {
  accessToken: String!
  user: User!
}

"""a single mapbox location"""
type MapboxLocation {
  id: ID!
  name: String!
  latitude: Float!
  longitude: Float!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type JobsConnection {
  edges: [JobEdge!]
  pageInfo: PageInfo
  totalCount: Int
  nodes: [Job!]!
}

type JobEdge {
  cursor: String!
  node: Job!
}

type Query {
  user(id: String!): User!
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  job(id: String!): Job!
  jobs(first: Int, after: String, last: Int, before: String, filter: JobsFilterInput): JobsConnection!
  mapboxLocations(filter: MapboxLocationFilterInput!): [MapboxLocation!]!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  email: StringFilter
  password: StringFilter
  firstName: StringNullableFilter
  lastName: StringNullableFilter
  jobs: JobListRelationFilter
  role: EnumSystemRoleFilter
  phone: StringNullableFilter
  companies: EmployeeInCompanyListRelationFilter
  emailVerified: BoolFilter
  phoneVerified: BoolFilter
  tags: TagListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableFilter
}

input JobListRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  title: StringFilter
  content: StringFilter
  status: EnumJobStatusFilter
  views: IntFilter
  author: UserRelationFilter
  authorId: StringNullableFilter
  location: LocationRelationFilter
  locationId: StringNullableFilter
  source: EnumJobSourceFilter
  company: CompanyRelationFilter
  companyId: StringNullableFilter
  images: ImageListRelationFilter
  externalUrl: StringNullableFilter
  tags: TagListRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumJobStatusFilter {
  equals: JobStatus
  in: [JobStatus!]
  notIn: [JobStatus!]
  not: NestedEnumJobStatusFilter
}

input NestedEnumJobStatusFilter {
  equals: JobStatus
  in: [JobStatus!]
  notIn: [JobStatus!]
  not: NestedEnumJobStatusFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input LocationRelationFilter {
  is: LocationWhereInput
  isNot: LocationWhereInput
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: StringFilter
  name: StringFilter
  latitude: FloatFilter
  longitude: FloatFilter
  jobs: JobListRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input EnumJobSourceFilter {
  equals: JobSource
  in: [JobSource!]
  notIn: [JobSource!]
  not: NestedEnumJobSourceFilter
}

input NestedEnumJobSourceFilter {
  equals: JobSource
  in: [JobSource!]
  notIn: [JobSource!]
  not: NestedEnumJobSourceFilter
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: StringFilter
  name: StringFilter
  employees: EmployeeInCompanyListRelationFilter
  jobs: JobListRelationFilter
  verified: BoolFilter
}

input EmployeeInCompanyListRelationFilter {
  every: EmployeeInCompanyWhereInput
  some: EmployeeInCompanyWhereInput
  none: EmployeeInCompanyWhereInput
}

input EmployeeInCompanyWhereInput {
  AND: [EmployeeInCompanyWhereInput!]
  OR: [EmployeeInCompanyWhereInput!]
  NOT: [EmployeeInCompanyWhereInput!]
  company: CompanyRelationFilter
  companyId: StringFilter
  employee: UserRelationFilter
  employeeId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  role: EnumUserRoleInCompanyFilter
}

input EnumUserRoleInCompanyFilter {
  equals: UserRoleInCompany
  in: [UserRoleInCompany!]
  notIn: [UserRoleInCompany!]
  not: NestedEnumUserRoleInCompanyFilter
}

enum UserRoleInCompany {
  OWNER
  ADMIN
  RECRUITER
}

input NestedEnumUserRoleInCompanyFilter {
  equals: UserRoleInCompany
  in: [UserRoleInCompany!]
  notIn: [UserRoleInCompany!]
  not: NestedEnumUserRoleInCompanyFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input ImageListRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  path: StringFilter
  bucket: StringFilter
  job: JobRelationFilter
  jobId: StringNullableFilter
}

input JobRelationFilter {
  is: JobWhereInput
  isNot: JobWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  jobs: JobListRelationFilter
  User: UserRelationFilter
  userId: StringNullableFilter
}

input EnumSystemRoleFilter {
  equals: SystemRole
  in: [SystemRole!]
  notIn: [SystemRole!]
  not: NestedEnumSystemRoleFilter
}

input NestedEnumSystemRoleFilter {
  equals: SystemRole
  in: [SystemRole!]
  notIn: [SystemRole!]
  not: NestedEnumSystemRoleFilter
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  jobs: JobOrderByRelationAggregateInput
  role: SortOrder
  phone: SortOrder
  companies: EmployeeInCompanyOrderByRelationAggregateInput
  emailVerified: SortOrder
  phoneVerified: SortOrder
  tags: TagOrderByRelationAggregateInput
  _relevance: UserOrderByRelevanceInput
}

enum SortOrder {
  asc
  desc
}

input JobOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployeeInCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum UserOrderByRelevanceFieldEnum {
  id
  email
  password
  firstName
  lastName
  phone
}

input UserWhereUniqueInput {
  id: String
  email: String
}

enum UserScalarFieldEnum {
  id
  createdAt
  updatedAt
  email
  password
  firstName
  lastName
  role
  phone
  emailVerified
  phoneVerified
}

input JobsFilterInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  title: StringFilter
  content: StringFilter
  status: EnumJobStatusFilter
  views: IntFilter
  author: UserRelationFilter
  authorId: StringNullableFilter
  location: LocationRelationFilter
  locationId: StringNullableFilter
  source: EnumJobSourceFilter
  company: CompanyRelationFilter
  companyId: StringNullableFilter
  images: ImageListRelationFilter
  externalUrl: StringNullableFilter
  tags: TagListRelationFilter
  searchString: String
  locationName: String
}

input MapboxLocationFilterInput {
  locationName: String
  limit: Float
}

type Mutation {
  login(loginInput: LoginInput!): LoginResponse!
}

input LoginInput {
  email: String!
  password: String!
}