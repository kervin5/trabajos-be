generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output   = "../src/@generated/prisma-nestjs-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//All user roles that can be used in the app
enum SystemRole {
  ADMIN
  CANDIDATE
  EMPLOYER
}

enum UserRoleInCompany {
  OWNER
  ADMIN
  RECRUITER
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  DELETED
  EXPIRED
}

/// @ObjectType({isAbstract: true})
model Company {
  id        String              @id @default(uuid())
  name      String
  /// @HideField()
  employees EmployeeInCompany[]
  /// @HideField()
  jobs      Job[]
  verified  Boolean             @default(false)
}

/// @ObjectType({isAbstract: true})
model EmployeeInCompany {
  /// @HideField()
  company    Company           @relation(fields: [companyId], references: [id])
  companyId  String
  /// @HideField()
  employee   User              @relation(fields: [employeeId], references: [id])
  employeeId String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  role       UserRoleInCompany @default(RECRUITER)

  @@id([employeeId, companyId])
}

/// @ObjectType({isAbstract: true})
model Location {
  id        String @id @default(uuid())
  name      String @unique
  latitude  Float
  longitude Float
  /// @HideField()
  jobs      Job[]
}

/// @ObjectType({isAbstract: true})
model User {
  id            String              @id @default(uuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  email         String              @unique
  /// @HideField({ output: true, input: false })
  password      String
  firstName     String?
  lastName      String?
  ///@HideField()
  jobs          Job[]
  role          SystemRole
  phone         String?
  /// @HideField()
  companies     EmployeeInCompany[]
  emailVerified Boolean             @default(false)
  phoneVerified Boolean             @default(false)
  /// @HideField()
  tags          Tag[]
}

enum JobSource {
  INTERNAL
  EXTERNAL
}

/// @ObjectType({isAbstract: true})
model Job {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime?
  title       String
  content     String
  status      JobStatus @default(DRAFT)
  views       Int       @default(0)
  /// @HideField()
  author      User?     @relation(fields: [authorId], references: [id])
  /// @HideField()
  authorId    String?
  /// @HideField()
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  String?
  source      JobSource @default(INTERNAL)
  /// @HideField()
  company     Company?  @relation(fields: [companyId], references: [id])
  companyId   String?
  /// @HideField()
  images      Image[]
  externalUrl String?
  tags        Tag[]
}

/// @ObjectType({isAbstract: true})
model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String
  bucket    String
  /// @HideField()
  job       Job?     @relation(fields: [jobId], references: [id])
  jobId     String?
}

/// @ObjectType({isAbstract: true})
model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  /// @HideField()
  jobs      Job[]
  /// @HideField()
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
